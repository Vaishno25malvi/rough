import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.*;

public class HTMLTableCellRenderer extends DefaultTableCellRenderer {

    public HTMLTableCellRenderer() {
        super();
        setHorizontalAlignment(SwingConstants.LEFT); // Align text to the left
        setVerticalAlignment(SwingConstants.TOP); // Align text to the top
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                   boolean hasFocus, int row, int column) {
        JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

        // Interpret the value as HTML and set it to the JLabel
        label.setText("<html>" + value.toString() + "</html>");

        return label;
    }
}




import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;

public class MultiLineTableCellRenderer extends JTextArea implements TableCellRenderer {

    public MultiLineTableCellRenderer() {
        setLineWrap(true);
        setWrapStyleWord(true);
        setOpaque(true); // Make sure the background is painted
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                   boolean hasFocus, int row, int column) {
        if (isSelected) {
            setForeground(table.getSelectionForeground());
            setBackground(table.getSelectionBackground());
        } else {
            setForeground(table.getForeground());
            setBackground(table.getBackground());
        }

        setFont(table.getFont());
        setText(value != null ? value.toString() : "");

        // Adjust the height of the row to match the preferred height of the JTextArea
        setSize(table.getColumnModel().getColumn(column).getWidth(), getPreferredSize().height);
        int preferredHeight = getPreferredSize().height;
        if (table.getRowHeight(row) != preferredHeight) {
            table.setRowHeight(row, preferredHeight);
        }

        return this;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("JTable Multi-line Cell Example");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Make the table cells non-editable
                }
            };
            JTable table = new JTable(model);

            model.addColumn("Column 1");
            model.addColumn("Column 2");
            model.addRow(new Object[]{"Short text", "This is a very long text that should wrap into multiple lines in the cell\nand this is another line\nand another line"});
            model.addRow(new Object[]{"Another short text", "Another long text that should also wrap into multiple lines\nwith multiple lines of text"});

            // Apply the custom renderer to the desired column
            table.getColumnModel().getColumn(1).setCellRenderer(new MultiLineTableCellRenderer());

            // Add the table to the frame
            frame.add(new JScrollPane(table));
            frame.pack();
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
        });
    }
}




Project Title

Problem Statement:
Analysis of the Problem Statement: 
The Harness Plugin, a CD orchestrator plugin, is crafted to boost developer productivity by minimizing context switching and optimizing workflow processes. This plugin integrates effortlessly with popular development environments like VS Code and IntelliJ IDEA. It offers a comprehensive suite of tools and features designed to streamline tasks and reduce the time developers spend transitioning between various applications and activities.
Tech-Stack:
For VS Code Plugin:
JavaScript, HTML, CSS
Modules: Axios, JS-YAML, Yaml, Ansi_to_Html
For IntelliJ IDEA Plugin:
Java, Gradle
Assumptions:
Users need access to Harness and some of its projects.
Users need to create an API key using Harness Developer Hub and save that along with their user ID and Harness URL (as needed) in a .harness file for user authentication.
User has initialized an work folder for harness.
Proposed Solution:
Develop a TreeView on the left side, similar to GitHub actions.
Ensure the extension is configurable for all types of users on Harness.
Develop a WebView to show a hierarchy tree of all the steps in a pipeline and execution logs related to them.
Demonstration:
Key Features:
Show details of all the projects Harness users have access to, along with its services and pipelines.
List all the environments under the project.
List all the input sets and the 10 most recent executions of any pipeline along with execution status.
Fetch YAML files for environments, services, input sets, pipelines.
Display all the log details of a pipeline execution in the panel.
Provide a website-like experience in IDE and reduce context switching.
Streamline workflow processes and minimize interruptions.
Offer a user-friendly interface for developers.
Future Work:
Fetch all the execution logs if given access to the POST APIs.
Enable triggering of any pipeline from the IDE itself, and real-time collaboration features.
Expand further to other APIs used in the organization.
Convert YAML of environments, services, input sets to visuals for user accessibility.
Allow modification of pipelines, input sets and other configurations from the IDE.

Journey and Challenges:
     Journey:
Studied the basics of plugin development.
Reviewed existing plugins for ideas.
Developed an initial model and iterated on it.
Reviewed and fixed some bugs.
    Challenges:
Access-related challenges for GitHub and Harness.
Tech stack-related challenges.
Performance optimization issues.
Impact:
Reduces context switching.
Increases developer productivity and efficiency.
Learnings:
Acquired knowledge of new tech stacks.
Gained understanding of CI/CD basics.
Enhanced teamwork and collaboration skills.

Installation Guide and User Manual
For Authentication of User:
User needs the following to use the plugin:
Creation of API Key:
Follow the link below to create personal API keys and tokens: 
Manage API keys | Harness Developer Hub 
Extraction of User Account ID:
Refer to the relevant screenshots for guidance.
Relevant Harness URL:
Save all this information in the .harness file located at C:/user/<K_ID>/.harness as shown in the screenshots.
Once the plugin has the required authentication, users can proceed to use the plugin.
UI Layout:
All projects the user is working on or has access to are displayed in the left side TreeView.
If a particular project is selected, all the services, pipelines, and environments of the project are shown.
If th
