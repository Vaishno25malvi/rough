package com.example;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindow;
import com.intellij.openapi.wm.ToolWindowFactory;
import com.intellij.ui.jcef.JBCefBrowser;
import com.intellij.ui.content.Content;
import com.intellij.ui.content.ContentFactory;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;
import java.awt.*;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.HashMap;
import java.util.Map;

public class HelloWorldToolWindowFactory implements ToolWindowFactory {

    private static final String API_URL = "https://your-api-url.com";
    private static final String API_KEY = "your-api-key";

    @Override
    public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {
        JSplitPane splitPane = new JSplitPane();

        DefaultMutableTreeNode root = createTreeNodes();
        JTree tree = new JTree(root);
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        JBCefBrowser browser = new JBCefBrowser();
        JPanel contentPanel = new JPanel(new BorderLayout());
        contentPanel.add(browser.getComponent(), BorderLayout.CENTER);

        Map<String, String> nodeUrlMap = createNodeUrlMap();

        tree.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
                if (selectedNode != null) {
                    String nodeName = selectedNode.getUserObject().toString();
                    String url = nodeUrlMap.get(nodeName);
                    if (url != null) {
                        fetchTokenAndData(url, browser);
                    } else {
                        browser.loadHTML("<html><body><p>No data available for " + nodeName + "</p></body></html>");
                    }
                }
            }
        });

        splitPane.setLeftComponent(new JScrollPane(tree));
        splitPane.setRightComponent(contentPanel);
        splitPane.setDividerLocation(200);

        ContentFactory contentFactory = ContentFactory.SERVICE.getInstance();
        Content content = contentFactory.createContent(splitPane, "", false);
        toolWindow.getContentManager().addContent(content);
    }

    private DefaultMutableTreeNode createTreeNodes() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Root");
        DefaultMutableTreeNode vaishnavi = new DefaultMutableTreeNode("vaishnavi");
        DefaultMutableTreeNode vanavi = new DefaultMutableTreeNode("vanavi");
        DefaultMutableTreeNode vaisi = new DefaultMutableTreeNode("vaisi");

        root.add(vaishnavi);
        root.add(vanavi);
        root.add(vaisi);

        vaishnavi.add(new DefaultMutableTreeNode("vaii"));
        vaishnavi.add(new DefaultMutableTreeNode("vaisi"));
        vaishnavi.add(new DefaultMutableTreeNode("navi"));

        vanavi.add(new DefaultMutableTreeNode("aii"));
        vanavi.add(new DefaultMutableTreeNode("si"));
        vanavi.add(new DefaultMutableTreeNode("nai"));

        return root;
    }

    private Map<String, String> createNodeUrlMap() {
        Map<String, String> map = new HashMap<>();
        map.put("vaishnavi", "https://jsonplaceholder.typicode.com/posts");
        map.put("vaii", "https://jsonplaceholder.typicode.com/comments");
        map.put("vaisi", "https://jsonplaceholder.typicode.com/users");
        map.put("vanavi", "https://jsonplaceholder.typicode.com/todos");
        map.put("aii", "https://jsonplaceholder.typicode.com/albums");
        map.put("si", "https://jsonplaceholder.typicode.com/photos");
        map.put("nai", "https://jsonplaceholder.typicode.com/comments");
        return map;
    }

    private void fetchTokenAndData(String url, JBCefBrowser browser) {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest tokenRequest = HttpRequest.newBuilder()
                .uri(URI.create(API_URL))
                .header("x-api-key", API_KEY)
                .build();

        client.sendAsync(tokenRequest, HttpResponse.BodyHandlers.ofString())
                .thenApply(HttpResponse::body)
                .thenApply(token -> fetchDataWithToken(client, token, url))
                .thenAccept(response -> browser.loadHTML(response))
                .exceptionally(e -> {
                    browser.loadHTML("<html><body><p>Error fetching token: " + e.getMessage() + "</p></body></html>");
                    return null;
                });
    }

    private String fetchDataWithToken(HttpClient client, String token, String dataURL) {
        HttpRequest dataRequest = HttpRequest.newBuilder()
                .uri(URI.create(dataURL))
                .header("token", token)
                .header("x-api-key", API_KEY)
                .build();

        try {
            HttpResponse<String> response = client.send(dataRequest, HttpResponse.BodyHandlers.ofString());
            return parseJsonToHtmlTable(response.body());
        } catch (IOException | InterruptedException e) {
            return "<html><body><p>Error fetching data: " + e.getMessage() + "</p></body></html>";
        }
    }

    private String parseJsonToHtmlTable(String json) {
        StringBuilder html = new StringBuilder("<html><body><table border='1'>");

        try {
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(json);

            if (rootNode.isArray() && rootNode.size() > 0) {
                JsonNode firstObject = rootNode.get(0);
                html.append("<tr>");
                firstObject.fieldNames().forEachRemaining(field -> html.append("<th>").append(field).append("</th>"));
                html.append("</tr>");

                for (JsonNode node : rootNode) {
                    html.append("<tr>");
                    node.fieldNames().forEachRemaining(field -> html.append("<td>").append(node.get(field).asText()).append("</td>"));
                    html.append("</tr>");
                }
            }
        } catch (IOException e) {
            return "<html><body><p>Error parsing JSON: " + e.getMessage() + "</p></body></html>";
        }

        html.append("</table></body></html>");
        return html.toString();
    }
}
.................

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.intellij.notification.Notification;
import com.intellij.notification.NotificationType;
import com.intellij.notification.Notifications;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.Messages;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PluginMain {

    private static final String API_URL = "https://your-api-url/token";
    private static final String API_KEY = "your-api-key";
    private static final String USER_ID = "user-id";
    private static final String PROJECT_ID = "project-id";

    private static String token;
    private static Map<String, String> urlMap;

    public static void main(String[] args) {
        // Initialize the plugin and start
        SwingUtilities.invokeLater(() -> {
            try {
                PluginMain plugin = new PluginMain();
                plugin.startPlugin();
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    public void startPlugin() {
        // Fetch token
        token = fetchToken(API_URL, API_KEY);

        if (token != null) {
            // Fetch URL map
            urlMap = getUrlMap(API_KEY, USER_ID, PROJECT_ID);

            // Display initial WebView content
            String initialContent = getInitialWebviewContent(urlMap);
            showWebView(initialContent);
        } else {
            // Handle token fetch error
            showError("Failed to fetch token from API.");
        }
    }

    private String fetchToken(String apiURL, String apiKey) {
        HttpClient client = HttpClients.createDefault();
        HttpGet request = new HttpGet(apiURL);
        request.addHeader("x-api-key", apiKey);

        try {
            HttpResponse response = client.execute(request);
            String responseBody = EntityUtils.toString(response.getEntity());
            ObjectMapper mapper = new ObjectMapper();
            JsonNode jsonNode = mapper.readTree(responseBody);
            return jsonNode.get("token").asText(); // Assuming JSON response {"token": "your_token"}
        } catch (IOException e) {
            Notifications.Bus.notify(new Notification("Token Fetch", "Failed to fetch token", e.getMessage(), NotificationType.ERROR));
            return null;
        }
    }

    private Map<String, String> getUrlMap(String apiKey, String userId, String proj) {
        String apiUrl = "https://wellsfargo-prod.harness.io/pipeline/api/p";

        HttpClient client = HttpClients.createDefault();
        HttpGet request = new HttpGet(apiUrl);
        request.addHeader("x-api-key", apiKey);

        try {
            HttpResponse response = client.execute(request);
            String responseBody = EntityUtils.toString(response.getEntity());
            ObjectMapper mapper = new ObjectMapper();
            JsonNode responseData = mapper.readTree(responseBody);
            JsonNode nodeMap = responseData.path("data").path("executionGraph").path("nodeMap");
            return createUrlMap(nodeMap.toString(), userId, proj);
        } catch (IOException e) {
            Notifications.Bus.notify(new Notification("URL Fetch", "Failed to fetch URL map", e.getMessage(), NotificationType.ERROR));
            return new HashMap<>();
        }
    }

    private Map<String, String> createUrlMap(String jsonString, String userId, String proj) {
        Map<String, String> urlMap = new HashMap<>();
        String regex = "logKeys\":\\[\"accountId:" + userId + "/orgId:wf/projectId:" + proj + "/pipelineId:([^\"]+)\"";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(jsonString);

        while (matcher.find()) {
            String key = matcher.group(1);
            String value = matcher.group(0); // Adjust as per your requirement
            urlMap.put(key, value);
        }

        return urlMap;
    }

    private String getInitialWebviewContent(Map<String, String> urlMap) {
        StringBuilder optionsBuilder = new StringBuilder();
        urlMap.forEach((key, value) -> optionsBuilder.append("<option value=\"").append(key).append("\">").append(key).append("</option>"));

        return "<!DOCTYPE html>\n" +
                "<html lang=\"en\">\n" +
                "<head>\n" +
                "    <meta charset=\"UTF-8\">\n" +
                "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n" +
                "    <title>Select option to display logs</title>\n" +
                "</head>\n" +
                "<body>\n" +
                "<h1>Select option to display logs</h1>\n" +
                "<select id=\"log-select\">\n" +
                optionsBuilder.toString() +
                "</select>\n" +
                "<button onclick=\"fetchData()\">Submit</button>\n" +
                "<script>\n" +
                "    function fetchData() {\n" +
                "        const topic = document.getElementById('log-select').value;\n" +
                "        // Logic to handle fetching data based on topic\n" +
                "    }\n" +
                "</script>\n" +
                "</body>\n" +
                "</html>";
    }

    private void showWebView(String htmlContent) {
        JFrame frame = new JFrame("Select Log");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 600);

        JFXPanel fxPanel = new JFXPanel();
        frame.add(fxPanel);

        Platform.runLater(() -> {
            WebView webView = new WebView();
            WebEngine engine = webView.getEngine();
            engine.loadContent(htmlContent);

            Scene scene = new Scene(webView);
            fxPanel.setScene(scene);
        });

        frame.setVisible(true);
    }

    private void showError(String message) {
        JOptionPane.showMessageDialog(null, message, "Error", JOptionPane.ERROR_MESSAGE);
    }
}















--------------------------------------------------------------------------------------------------------------------------------------------------------------
package com.example;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindow;
import com.intellij.openapi.wm.ToolWindowFactory;
import com.intellij.ui.jcef.JBCefBrowser;
import com.intellij.ui.content.Content;
import com.intellij.ui.content.ContentFactory;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;
import java.awt.*;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.HashMap;
import java.util.Map;

public class HelloWorldToolWindowFactory implements ToolWindowFactory {

    @Override
    public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {
        JSplitPane splitPane = new JSplitPane();

        DefaultMutableTreeNode root = createTreeNodes();
        JTree tree = new JTree(root);
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        JBCefBrowser browser = new JBCefBrowser();
        JPanel contentPanel = new JPanel(new BorderLayout());
        contentPanel.add(browser.getComponent(), BorderLayout.CENTER);

        Map<String, String> nodeUrlMap = createNodeUrlMap();

        tree.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
                if (selectedNode != null) {
                    String nodeName = selectedNode.getUserObject().toString();
                    String url = nodeUrlMap.get(nodeName);
                    if (url != null) {
                        fetchAndDisplayData(url, browser);
                    } else {
                        browser.loadHTML("<html><body><p>No data available for " + nodeName + "</p></body></html>");
                    }
                }
            }
        });

        splitPane.setLeftComponent(new JScrollPane(tree));
        splitPane.setRightComponent(contentPanel);
        splitPane.setDividerLocation(200);

        ContentFactory contentFactory = ContentFactory.SERVICE.getInstance();
        Content content = contentFactory.createContent(splitPane, "", false);
        toolWindow.getContentManager().addContent(content);
    }

    private DefaultMutableTreeNode createTreeNodes() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Root");
        DefaultMutableTreeNode node1 = new DefaultMutableTreeNode("Node 1");
        DefaultMutableTreeNode node2 = new DefaultMutableTreeNode("Node 2");
        DefaultMutableTreeNode node3 = new DefaultMutableTreeNode("Node 3");

        root.add(node1);
        root.add(node2);
        root.add(node3);

        DefaultMutableTreeNode node1Child1 = new DefaultMutableTreeNode("Node 1.1");
        DefaultMutableTreeNode node1Child2 = new DefaultMutableTreeNode("Node 1.2");

        node1.add(node1Child1);
        node1.add(node1Child2);

        return root;
    }

    private Map<String, String> createNodeUrlMap() {
        Map<String, String> map = new HashMap<>();
        map.put("Node 1", "https://jsonplaceholder.typicode.com/posts");
        map.put("Node 1.1", "https://jsonplaceholder.typicode.com/comments");
        map.put("Node 1.2", "https://jsonplaceholder.typicode.com/users");
        map.put("Node 2", "https://jsonplaceholder.typicode.com/todos");
        map.put("Node 3", "https://jsonplaceholder.typicode.com/albums");
        return map;
    }

    private void fetchAndDisplayData(String url, JBCefBrowser browser) {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .build();

        client.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                .thenApply(HttpResponse::body)
                .thenApply(this::parseJsonToHtmlTable)
                .thenAccept(html -> browser.loadHTML(html))
                .exceptionally(e -> {
                    browser.loadHTML("<html><body><p>Error fetching data: " + e.getMessage() + "</p></body></html>");
                    return null;
                });
    }

    private String parseJsonToHtmlTable(String json) {
        StringBuilder html = new StringBuilder("<html><body><table border='1'>");

        try {
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(json);

            if (rootNode.isArray() && rootNode.size() > 0) {
                JsonNode firstObject = rootNode.get(0);
                html.append("<tr>");
                firstObject.fieldNames().forEachRemaining(field -> html.append("<th>").append(field).append("</th>"));
                html.append("</tr>");

                for (JsonNode node : rootNode) {
                    html.append("<tr>");
                    node.fieldNames().forEachRemaining(field -> html.append("<td>").append(node.get(field).asText()).append("</td>"));
                    html.append("</tr>");
                }
            }
        } catch (IOException e) {
            return "<html><body><p>Error parsing JSON: " + e.getMessage() + "</p></body></html>";
        }

        html.append("</table></body></html>");
        return html.toString();
    }
}


------




package com.example;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindow;
import com.intellij.openapi.wm.ToolWindowFactory;
import com.intellij.ui.jcef.JBCefBrowser;
import com.intellij.ui.content.Content;
import com.intellij.ui.content.ContentFactory;
import org.jetbrains.annotations.NotNull;
import org.json.JSONArray;
import org.json.JSONObject;

import javax.swing.*;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;
import java.awt.*;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.HashMap;
import java.util.Map;

public class HelloWorldToolWindowFactory implements ToolWindowFactory {
    @Override
    public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {
        // Create a split pane with a tree on the left and a content area on the right
        JSplitPane splitPane = new JSplitPane();

        // Create the tree
        DefaultMutableTreeNode root = createTreeNodes();
        JTree tree = new JTree(root);
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        // Create the WebView for the content area
        JBCefBrowser browser = new JBCefBrowser();
        JPanel contentPanel = new JPanel(new BorderLayout());
        contentPanel.add(browser.getComponent(), BorderLayout.CENTER);

        // Map to hold node-to-URL relationships
        Map<String, String> nodeUrlMap = createNodeUrlMap();

        // Add a listener to update the content area when a node is selected
        tree.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
                if (selectedNode != null) {
                    String nodeName = selectedNode.getUserObject().toString();
                    String url = nodeUrlMap.get(nodeName);
                    if (url != null) {
                        fetchAndDisplayData(url, browser);
                    } else {
                        browser.loadHTML("<html><body><p>No data available for " + nodeName + "</p></body></html>");
                    }
                }
            }
        });

        // Set up the split pane
        splitPane.setLeftComponent(new JScrollPane(tree));
        splitPane.setRightComponent(contentPanel);
        splitPane.setDividerLocation(200);

        // Add the split pane to the tool window
        ContentFactory contentFactory = ContentFactory.SERVICE.getInstance();
        Content content = contentFactory.createContent(splitPane, "", false);
        toolWindow.getContentManager().addContent(content);
    }

    private DefaultMutableTreeNode createTreeNodes() {
        // Create the root node and add child nodes
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Root");
        DefaultMutableTreeNode node1 = new DefaultMutableTreeNode("Node 1");
        DefaultMutableTreeNode node2 = new DefaultMutableTreeNode("Node 2");
        DefaultMutableTreeNode node3 = new DefaultMutableTreeNode("Node 3");

        root.add(node1);
        root.add(node2);
        root.add(node3);

        DefaultMutableTreeNode node1Child1 = new DefaultMutableTreeNode("Node 1.1");
        DefaultMutableTreeNode node1Child2 = new DefaultMutableTreeNode("Node 1.2");

        node1.add(node1Child1);
        node1.add(node1Child2);

        return root;
    }

    private Map<String, String> createNodeUrlMap() {
        // Create a map of node names to URLs
        Map<String, String> map = new HashMap<>();
        map.put("Node 1", "https://jsonplaceholder.typicode.com/posts");
        map.put("Node 1.1", "https://jsonplaceholder.typicode.com/comments");
        map.put("Node 1.2", "https://jsonplaceholder.typicode.com/users");
        map.put("Node 2", "https://jsonplaceholder.typicode.com/todos");
        map.put("Node 3", "https://jsonplaceholder.typicode.com/albums");
        return map;
    }

    private void fetchAndDisplayData(String url, JBCefBrowser browser) {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .build();

        client.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                .thenApply(HttpResponse::body)
                .thenApply(this::parseJsonToHtmlTable)
                .thenAccept(html -> browser.loadHTML(html))
                .exceptionally(e -> {
                    browser.loadHTML("<html><body><p>Error fetching data: " + e.getMessage() + "</p></body></html>");
                    return null;
                });
    }

    private String parseJsonToHtmlTable(String json) {
        StringBuilder html = new StringBuilder("<html><body><table border='1'>");

        try {
            JSONArray jsonArray = new JSONArray(json);
            if (jsonArray.length() > 0) {
                // Table headers
                JSONObject firstObject = jsonArray.getJSONObject(0);
                html.append("<tr>");
                for (String key : firstObject.keySet()) {
                    html.append("<th>").append(key).append("</th>");
                }
                html.append("</tr>");

                // Table rows
                for (int i = 0; i < jsonArray.length(); i++) {
                    JSONObject jsonObject = jsonArray.getJSONObject(i);
                    html.append("<tr>");
                    for (String key : jsonObject.keySet()) {
                        html.append("<td>").append(jsonObject.get(key).toString()).append("</td>");
                    }
                    html.append("</tr>");
                }
            }
        } catch (Exception e) {
            return "<html><body><p>Error parsing JSON: " + e.getMessage() + "</p></body></html>";
        }

        html.append("</table></body></html>");
        return html.toString();
    }
}




plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.1.4'
}

group 'com.example'
version '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains:annotations:20.1.0"
    implementation 'org.json:json:20210307'
}

intellij {
    version '2021.2'
    plugins = ['com.intellij.java']
}

sourceCompatibility = '11'
targetCompatibility = '11'

patchPluginXml {
    changeNotes """
      Initial version.
      """
}
